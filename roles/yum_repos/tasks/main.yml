---
- name: Flush handlers.
  ansible.builtin.meta: flush_handlers

- name: "Find all *.repo files in {{ yum_repos_repo_config_dir }}."
  ansible.builtin.find:
    paths: "{{ yum_repos_repo_config_dir }}"
    use_regex: false
    patterns: '*.repo'
    excludes: 'local_yum.repo'
  register: yum_existing_repos

- name: DEBUG 1
  debug:
    msg: "All repo files: {{ yum_repos[os_distribution] | map(attribute='file') | unique }}"

- name: DEBUG 2
  debug:
    msg: "Repo file to remove: {{ yum_repos[os_distribution] | map(attribute='file') | unique }}"
  with_items: "{{ yum_existing_repos.files | map(attribute='path') | list }}"
  when: item | basename not in yum_repos[os_distribution] | map(attribute='file') | list

- meta: end_play

- name: "Remove {{ yum_repos_repo_config_dir }}/*.repo files that do not correspond to our repos."
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ yum_existing_repos.files | map(attribute='path') | list }}"
  when: item | basename | regex_replace('.repo$','') not in yum_repos[os_distribution] | map(attribute='name') | list
#  become: true

- name: 'Configure *.repo files in /etc/yum.repos.d/ for the repos we use: set enabled.'
  community.general.ini_file:
    path: "{{ yum_repos_repo_config_dir/{{ item.file }}"
    section: "{{ item.name }}"
    no_extra_spaces: true
    create: true
    option: enabled
    value: "{{ item.enabled }}"
  loop: "{{ yum_repos[os_distribution] | selectattr('enabled', 'defined') | flatten(levels=1) }}"
#  become: true

- name: 'Configure *.repo files from /etc/yum.repos.d/ for the repos we use: set.'
  community.general.ini_file:
    path: "{{ yum_repos_repo_config_dir/{{ item.file }}"
    section: "{{ item.name }}"
    no_extra_spaces: true
    create: true
    option: enabled
    value: "{{ item.enabled }}"
  loop: "{{ yum_repos[os_distribution] | flatten(levels=1) }}"
#  become: true





#- name: Add custom yum repos.
#  ansible.builtin.yum_repository:
#    name: "{{ item.name }}"
#    description: "{{ item.description }}"
#    baseurl: "{{ item.baseurl }}"
#    gpgcheck: "{{ item.gpgcheck }}"
#    gpgkey: "{{ item.gpgkey }}"
#  with_list: "{{ yum_repos[os_distribution] }}"
#  become: true
...
