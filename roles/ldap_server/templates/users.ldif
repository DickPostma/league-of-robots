## {1}mdb, config
#dn: olcDatabase={1}mdb,cn=config
#objectClass: olcDatabaseConfig
#objectClass: olcMdbConfig
#olcDatabase: {1}mdb
#olcDbDirectory: /usr/local/openldap/var/openldap-data
#olcSuffix: dc=my-domain,dc=com
#olcAccess: {0}to attrs=userPassword  by dn.base="gidNumber=0+uidNumber=0,cn=pe
# ercred,cn=external,cn=auth" =wxd  by group/groupOfNames/member.exact="cn=admi
# n,ou=groups,dc=my-domain,dc=com" =wxd  by self =wxd  by * auth
#olcAccess: {1}to *  by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=externa
# l,cn=auth" manage  by group/groupOfNames/member.exact="cn=admin,ou=groups,dc=
# my-domain,dc=com" write  by users read
#olcAddContentAcl: FALSE
#olcLastMod: TRUE
#olcLastBind: TRUE
#olcLimits: {0}group/groupOfNames/member="cn=admin,ou=groups,dc=my-domain,dc=co
# m" size=unlimited  time=unlimited
#olcMaxDerefDepth: 15
#olcReadOnly: FALSE
#olcRootDN: cn=Manager,dc=my-domain,dc=com
#olcRootPW: {ARGON2}$argon2id$v=19$m=65536,t=2,p=1$epx6HKwz8UgEN5pY/FVNyQ$aiL6s
# UOXnAEAP6OtbvUNkiXq+XG0W14iS7T8Acfz8RY
#olcSyncUseSubentry: FALSE
#olcMonitoring: TRUE
#olcDbNoSync: FALSE
#olcDbIndex: objectClass eq
#olcDbIndex: cn eq,sub
#olcDbIndex: uid pres,eq
#olcDbIndex: givenName pres,eq,sub
#olcDbIndex: l pres,eq
#olcDbIndex: employeeType pres,eq
#olcDbIndex: mail pres,eq,sub
#olcDbIndex: sn pres,eq,sub
#olcDbMaxReaders: 0
#olcDbMaxSize: 4294967296
#olcDbMode: 0600
#olcDbSearchStack: 16
#olcDbMaxEntrySize: 0
#olcDbRtxnSize: 10000
#
# Create new databases.
#
{% for domain in ldap_domains | default([])
                              | dict2items
                              | selectattr('value.create_ldap', 'defined')
                              | selectattr('value.create_ldap')
                              | list %}
dn: olcDatabase={% raw %}{{% endraw %}{{ domain.value['ldap_db_index'] }}{% raw %}}{% endraw %}mdb,cn=config
changetype: add
olcDatabase: {% raw %}{{% endraw %}{{ domain.value['ldap_db_index'] }}{% raw %}}{% endraw %}mdb
objectClass: olcDatabaseConfig
objectClass: olcMdbConfig
olcDbDirectory: /usr/local/var/{{ domain.key }}-data
olcSuffix: {{ domain.value['search_base'] }}

dn: olcDatabase={% raw %}{{% endraw %}{{ domain.value['ldap_db_index'] }}{% raw %}}{% endraw %}mdb,cn=config
changetype: modify
replace: objectClass
objectClass: olcDatabaseConfig
objectClass: olcMdbConfig
-
replace: olcDbDirectory
olcDbDirectory: /usr/local/var/{{ domain.key }}-data
-
replace: olcDbMode
olcDbMode: 0600
-
replace: olcDbMaxSize
olcDbMaxSize: 104857600
-
replace: olcSuffix
olcSuffix: {{ domain.value['search_base'] }}
-
replace: olcRootDN
olcRootDN: cn=manager,{{ domain.value['search_base'] }}
-
replace: olcRootPW
olcRootPW: {{ ldap_root_password_hash }}
-
replace: olcLimits
olcLimits: {0}users size=unlimited time=unlimited
-
replace: olcMonitoring
olcMonitoring: TRUE
-
replace: olcDbNoSync
olcDbNoSync: FALSE
-
replace: olcDbIndex
olcDbIndex: objectClass eq
olcDbIndex: cn,givenName,sn,mail pres,eq,sub
olcDbIndex: uid pres,eq

#
# Create readonly and admin users
#
dn: {{ ldap_credentials[domain.key]['readonly']['dn'] }}
changetype: modify
replace: cn
cn: {{ ldap_credentials[domain.key]['readonly']['dn'] | regex_replace('^cn=([^,]+),.*', '\\1') }}
-
replace: objectClass
objectClass: simpleSecurityObject
objectClass: organizationalRole
-
replace: userPassword
userPassword: {{ ldap_credentials[domain.key]['readonly']['hash'] }}
-
replace: description
description: LDAP read only user for {{ domain.value['search_base'] }}

dn: {{ ldap_credentials[domain.key]['admin']['dn'] }}
changetype: modify
replace: cn
cn: {{ ldap_credentials[domain.key]['admin']['dn'] | regex_replace('^cn=([^,]+),.*', '\\1') }}
-
replace: objectClass
objectClass: simpleSecurityObject
objectClass: organizationalRole
-
replace: userPassword
userPassword: {{ ldap_credentials[domain.key]['admin']['hash'] }}
-
replace description
description: LDAP admin user for {{ domain.value['search_base'] }}

{% endfor %}
#
# Update ACLs and permissions.
#
dn: olcDatabase={1}mdb,cn=config
changetype: modify
delete: olcAccess
-
add: olcAccess
olcAccess: to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage by * break
olcAccess: to attrs=userPassword by self read by * none
{% for domain in ldap_domains | default([])
                              | dict2items
                              | selectattr('value.create_ldap', 'defined')
                              | selectattr('value.create_ldap')
                              | list %}
olcAccess: to dn.subtree="{{ domain.value['search_base'] }}" by dn="cn=admin,{{ domain.value['search_base'] }}" write by dn="cn=readonly,{{ domain.value['search_base'] }}" read by * none
{% endfor %}
