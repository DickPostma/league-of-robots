---
#- name: 'DEBUG1: role got triggered.'
#  ansible.builtin.debug:
#    msg: "{{ item }}"
#  loop: "{{ ldap_domains | default([])
#                         | dict2items
#                         | selectattr('value.create_ldap', 'defined')
#                         | selectattr('value.create_ldap')
#                         | list }}"
#- name: 'DEBUG2: role got triggered.'
#  ansible.builtin.debug:
#    msg: "{{ ldap_credentials[item.key]['readonly']['hash'] }}"
#  loop: "{{ ldap_domains | default([])
#                         | dict2items
#                         | selectattr('value.create_ldap', 'defined')
#                         | selectattr('value.create_ldap')
#                         | list }}"
#
#- meta: end_play

- name: Install OpenLDAP server and dependencies.
  ansible.builtin.yum:
    state: latest
    update_cache: true
    name:
      - curl
      - cracklib
      - openldap-ltb
      - openldap-ltb-contrib-overlays
      - openldap-ltb-mdb-utils
  notify: restart_slapd
  become: true

- name: Install key, certificate and dhparam files for TLS.
  ansible.builtin.copy:
    src: "files/{{ stack_name }}/{{ item.name }}"
    dest: "{{ ldap_server_tls_dir }}/{{ item.name }}"
    owner: root
    group: ldap
    mode: "{{ item.mode }}"
  with_items:
    - name: ldap.key
      mode: '0640'
    - name: ldap.crt
      mode: '0644'
    - name: dhparam.pem
      mode: '0644'
  notify: restart_slapd
  become: true

- name: 'Workaround for self signed certs: create symlink for ca.crt -> ldap.crt.'
  ansible.builtin.file:  # noqa risky-file-permissions
    src: ldap.crt
    dest: "{{ ldap_server_tls_dir }}/ca.crt"
    owner: root
    group: ldap
    state: link
  become: true

- name: Create folders for LDAP databases.
  ansible.builtin.file:
    path: "/usr/local/openldap/var/{{ item.key }}-data"
    state: directory
    mode: '0750'
    owner: ldap
    group: ldap
  loop: "{{ ldap_domains | default([])
                         | dict2items
                         | selectattr('value.create_ldap', 'defined')
                         | selectattr('value.create_ldap')
                         | list }}"
  become: true

- name: Make directory for custom LDIF files.
  ansible.builtin.file:
    path: '/usr/local/openldap/etc/openldap/custom'
    state: directory
    owner: root
    group: ldap
    mode: '0750'
  become: true

- name: Create LDAP root password hash.
  ansible.builtin.command:
    cmd: >
         /usr/local/openldap/sbin/slappasswd
             -o module-path='/usr/local/openldap/libexec/openldap'
             -o module-load='argon2' -h '{ARGON2}'
             -s '{{ openldap_root_pw }}'
  register: slappasswd_root
  changed_when: true
  no_log: true
  become: true  # Technically not required, but if anything sensitive does end up in a log/history it is in that of the root user.

#
# ToDo: update README.md with these instructions and hwo to add the hashed to secrets.yml
#
#- name: Create LDAP domain user password hashes.
#  ansible.builtin.command:
#    cmd: >
#         /usr/local/openldap/sbin/slappasswd
#             -o module-path='/usr/local/openldap/libexec/openldap'
#             -o module-load='argon2' -h '{ARGON2}'
#             -s '{{ openldap_root_pw }}'
#  loop: ldap_domains | default([]) 
#                     | dict2items
#                     | selectattr('value.create_ldap', 'defined')
#                     | selectattr('value.create_ldap')
#                     | list
                     
- name: Install custom LDIF files.
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/usr/local/openldap/etc/openldap/custom/{{ item }}"
    owner: root
    group: ldap
    mode: '0640'
  with_items:
    - root.ldif
    - tls.ldif
    - rfc2307bis.ldif
    #- users.ldif
  vars:
    ldap_root_password_hash: "{{ slappasswd_root.stdout }}"
  register: ldap_server_config
  become: true

- name: Make sure slapd-ltb.service (OpenLDAP server) is started.
  ansible.builtin.systemd:
    name: slapd-ltb.service
    state: started
    enabled: true
    daemon_reload: true
  become: true

- name: Modify config using settings in LDIF files.
  ansible.builtin.command:
    cmd: >
         ldapmodify -Y EXTERNAL -H ldapi://%2Fvar%2Frun%2Fslapd%2Fldapi
                    -f '/usr/local/openldap/etc/openldap/custom/{{ item }}'
  with_items:
    - root.ldif
    - tls.ldif
    #- users.ldif
  when: ldap_server_config | json_query(query) | first is true
  vars:
    query: "results[?item=='{{ item }}'].changed"
  become: true

- name: Add additional schema LDIF files.
  ansible.builtin.command:
    cmd: >
         ldapadd -Y EXTERNAL -H ldapi://%2Fvar%2Frun%2Fslapd%2Fldapi
                    -f '/usr/local/openldap/etc/openldap/custom/{{ item }}'
  with_items:
    - rfc2307bis.ldif  # Note: this requires core.ldif, cosine.ldif and inetorgperson.ldif, which should already be installed by default.
  register: ldap_server_ldapadd
  failed_when:
    - "'error' in ldap_server_ldapadd.stderr"
    - "'Duplicate' not in ldap_server_ldapadd.stderr"
  changed_when:
    - "'adding new entry' in ldap_server_ldapadd.stdout"
    - "'Duplicate' not in ldap_server_ldapadd.stderr"
  ignore_errors: true
  become: true

- name: Create databases for domains in the OpenLDAP config database.
  community.general.ldap_entry:
    server_uri: "ldapi://%2Fvar%2Frun%2Fslapd%2Fldapi"
    dn: "olcDatabase={% raw %}{{% endraw %}{{ item.value['ldap_db_index'] }}{% raw %}}{% endraw %}mdb,cn=config"
    state: present
    objectClass:
      - olcDatabaseConfig
      - olcMdbConfig
    attributes:
      #
      # These attributes cannot be changed with this role.
      #
      olcDatabase: "{% raw %}{{% endraw %}{{ item.value['ldap_db_index'] }}{% raw %}}{% endraw %}mdb"
      olcDbDirectory: "/usr/local/openldap/var/{{ item.key }}-data"
      olcSuffix: "{{ item.value['search_base'] }}"
  loop: "{{ ldap_domains | default([])
                         | dict2items
                         | selectattr('value.create_ldap', 'defined')
                         | selectattr('value.create_ldap')
                         | list }}"
  become: true

- name: Update database attributes in the OpenLDAP config database.
  community.general.ldap_attrs:
    server_uri: "ldapi://%2Fvar%2Frun%2Fslapd%2Fldapi"
    dn: "olcDatabase={% raw %}{{% endraw %}{{ item.value['ldap_db_index'] }}{% raw %}}{% endraw %}mdb,cn=config"
    state: exact
    attributes:
      olcDbMode: '0600'
      olcDbMaxSize: 104857600
      olcRootDN: "cn=manager,{{ item.value['search_base'] }}"
      olcRootPW: "{{ slappasswd_root.stdout }}"
      olcLimits: '{0}users size=unlimited time=unlimited'
      olcMonitoring: 'TRUE'
      olcDbNoSync: 'FALSE'
      olcDbIndex:
        - objectClass eq
        - cn,givenName,sn,mail pres,eq,sub
        - uid pres,eq
      olcAccess:
        - to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage by * break
        - to attrs=userPassword by self read by * none
        - to dn.subtree="{{ item.value['search_base'] }}" by dn="cn=admin,{{ item.value['search_base'] }}" write by dn="cn=readonly,{{ item.value['search_base'] }}" read by * none
  loop: "{{ ldap_domains | default([])
                         | dict2items
                         | selectattr('value.create_ldap', 'defined')
                         | selectattr('value.create_ldap')
                         | list }}"
  become: true

- name: Create top level entry in LDAP databases.
  community.general.ldap_entry:
    server_uri: "ldapi://%2Fvar%2Frun%2Fslapd%2Fldapi"
    dn: "{{ item.value['search_base'] }}"
    state: present
    objectClass:
      - domain
  loop: "{{ ldap_domains | default([])
                         | dict2items
                         | selectattr('value.create_ldap', 'defined')
                         | selectattr('value.create_ldap')
                         | list }}"
  become: true

- name: Create functional accounts to access the LDAP databases.
  community.general.ldap_entry:
    server_uri: "ldapi://%2Fvar%2Frun%2Fslapd%2Fldapi"
    dn: "{{ ldap_credentials[item.0.key][item.1]['dn'] }}"
    state: present
    objectClass:
      - simpleSecurityObject
      - organizationalRole
    attributes:
      #
      # These attributes cannot be changed with this role.
      #
      cn: "{{ ldap_credentials[item.0.key][item.1]['dn'] | regex_replace('^cn=([^,]+),.*', '\\1') }}"
      #
      # These mandatory attributes will be updated if necessary with the ldap_attrs task below.
      #
      userPassword: "{{ ldap_credentials[item.0.key][item.1]['hash'] }}"
  vars:
    functional_accounts:
      - admin
      - readonly
  loop: "{{ ldap_domains | default([])
                         | dict2items
                         | selectattr('value.create_ldap', 'defined')
                         | selectattr('value.create_ldap')
                         | product(functional_accounts)
                         | list }}"
  become: true

- name: Update attributes of functional accounts used to access the LDAP databases.
  community.general.ldap_attrs:
    server_uri: "ldapi://%2Fvar%2Frun%2Fslapd%2Fldapi"
    dn: "{{ ldap_credentials[item.0.key][item.1]['dn'] }}"
    state: exact
    attributes:
      userPassword: "{{ ldap_credentials[item.0.key][item.1]['hash'] }}"
      description: "LDAP {{ item.1 }} user for {{ item.0.value['search_base'] }}"
  vars:
    functional_accounts:
      - admin
      - readonly
  loop: "{{ ldap_domains | default([])
                         | dict2items
                         | selectattr('value.create_ldap', 'defined')
                         | selectattr('value.create_ldap')
                         | product(functional_accounts)
                         | list }}"
  become: true
...
