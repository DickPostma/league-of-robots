# installing the iRODS ICAT
- name: Create {{ irods_service_account }} group
  group:
    name: "{{ irods_service_account }}"
    state: present
  become: true

- name: Creating {{ irods_service_account }} user
  user:
    name: "{{ irods_service_account }}"
    groups: "{{ irods_service_account }},admin"
  become: true

- name: Installing the iRODS Package(s)
  yum:
    name: '{{ item }}'
    state: present
  loop:
    - irods-server
    - irods-database-plugin-postgres
    - irods-resource-plugin-s3-4.2.10.0-1
    - irods-rule-engine-plugin-python
  become: true

- name: Make sure that the hostname is set correct FQDN name
  ansible.builtin.hostname:
    name: '{{ irods_icat_fqdn }}'
  become: true

- name: Ensure that /etc/irods directory exists and is owned by {{ irods_service_account }}
  ansible.builtin.file:
    path: '/etc/irods'
    state: directory
    owner: '{{ irods_service_account }}'
    group: '{{ irods_service_account }}'
    mode: '0755'
  become: true

- name: Install certificate key and chain files for iRODS
  ansible.builtin.copy:
    src: 'files/{{ slurm_cluster_name }}_cluster/nemi_irods/{{ item.name }}'
    dest: '/etc/irods/{{ item.name }}'
    owner: '{{ irods_service_account }}'
    group: '{{ irods_service_account }}'
    mode: '{{ item.mode }}'
    decrypt: true
    force: true
  with_items:
    - name: '{{ irods_ssl_certificate_key_file }}'
      mode: '0600'
    - name: '{{ irods_ssl_certificate_chain_file }}'
      mode: '0644'
  become: true

- name: If missing, build 4096 bit DHparam /etc/irods/{{ irods_ssl_dh_params_file }} file (takes several minues ...)
  ansible.builtin.command:
    cmd: /bin/openssl dhparam -2 -out /etc/irods/{{ irods_ssl_dh_params_file }} 4096
    creates: /etc/irods/{{ irods_ssl_dh_params_file }}
  register: result
  failed_when:
    - result.rc != 0
  become: true

- name: Set ownership of {{ irods_ssl_dh_params_file }}
  ansible.builtin.file:
    path: '/etc/irods/{{ irods_ssl_dh_params_file }}'
    owner: '{{ irods_service_account }}'
    group: '{{ irods_service_account }}'
    mode: '0644'
  become: true

- name: create_unattended_installation_json
  template:
    src: unattended_install.json.j2
    dest: /root/unattended_install.json
    mode: '0600'
  register: create_unattended_installation_json
  become: true

# - name: Check if {{ irods_db_name }} database is available
#  postgresql_ping:
#    db: "{{ irods_db_name }}"
#  register: check_database
#  become_user: postgres
#  become: true
#
- name: Create a new database "{{ irods_db_name }}" if missing
  postgresql_db:
    name: "{{ irods_db_name }}"
    state: present
#  when: check_database.is_available is false
  register: db_created
  become_user: postgres
  become: true

- name: Creating irods sql user and granting privileges
  postgresql_user:
    name: "{{ irods_db_user }}"
    password: "{{ irods_db_pwd }}"
    db: "{{ irods_db_name }}"
    priv: ALL
    state: present
  become_user: postgres
  become: true

- name: Collect list of tables from existing {{ irods_db_name }}
  ansible.builtin.command: psql -d ICAT -c '\dt'
  changed_when: false
  register: database_tables
  become_user: postgres
  become: true

- name: Install iRODS, if {{ irods_db_name }} is empty (no tables exist)
  ansible.builtin.command: sudo python /var/lib/irods/scripts/setup_irods.py --json_configuration_file=/root/unattended_install.json
  when: '"No relations found." in database_tables.stdout'
  run_once: true
  async: 120
  poll: 1
  become_user: '{{ irods_service_account }}'
  become: true

- name: Edit /etc/irods/core.re to enforce the use of the certificates
  become: true
  lineinfile:
    name: /etc/irods/core.re
    search_string: 'acPreConnect(*OUT) { *OUT="CS_NEG_DONT_CARE"; }'
    line: 'acPreConnect(*OUT) { *OUT="CS_NEG_REQUIRE"; }'

- name: Edit /etc/irods/core.re to set number of threads to 4
  become: true
  lineinfile:
    name: /etc/irods/core.re
    search_string: 'acSetNumThreads {msiSetNumThreads("default","default","default"); }'
    line: 'acSetNumThreads {msiSetNumThreads("default","4","default"); }'

- name: Increase systcl limits to allow longer transfers
  copy:
    src: '{{ role_path }}/files/irods_fix.conf'
    dest: /etc/sysctl.d/
    mode: 0644
  become: true

- name: Fix the s3 authentication by creating dummy s3auth file
  ansible.builtin.copy:
    content: |
      foo
      bar
    dest: /etc/irods/.s3auth
    force: true
    mode: 0644
    owner: '{{ irods_service_account }}'
    group: '{{ irods_service_account }}'
  become_user: '{{ irods_service_account }}'
  become: true

- name: Enable and iRODS service
  sysvinit:
    name: irods
    enabled: true
  become: true

# Start/stop/restart service call fails if with error if already in that state
# so it's best if done via user call (as this is what the service does anyways)
- name: Restart iRODS server manually via {{ irods_service_account }}
  command: /var/lib/irods/irodsctl restart
  become_user: '{{ irods_service_account }}'
  become: true
