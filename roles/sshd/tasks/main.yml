---
- name: Check if system has /etc/pam.d/sshd
  ansible.builtin.stat:
    path: /etc/pam.d/sshd
  register: pam_sshd_status
  when: inventory_hostname in totp.machines | default([])

- name: Fail if host does not have /etc/pam.d/sshd.
  ansible.builtin.fail:
    msg: This host does not have a /etc/pam.d/sshd file. We cannot configure the PAM stack. Check the sshd setup.
  when:
    - (inventory_hostname in totp.machines | default([])) or
      (inventory_hostname in pam_weblogin.machines | default([]))
    - pam_sshd_status.stat.exists is false

- name: Fail if both MFA with TOTPs and pam plugin for web logins are configured.
  ansible.builtin.fail:
    msg: "MFA with TOTPs and the pam plugin for web logins are both configured, but mutually exclusive:
         check the sshd setup for the {{ stack_name }} stack."
  when:
    - inventory_hostname in totp.machines | default([])
    - inventory_hostname in pam_weblogin.machines | default([])

- name: 'Update /etc/pam.d/sshd: Enable password-auth.'
  ansible.builtin.lineinfile:
    path: '/etc/pam.d/sshd'
    owner: root
    group: root
    mode: '0644'
    insertafter: '^#%PAM'
    regexp: '^#?auth(\s+)([a-z]+)(\s+)password-auth'
    line: 'auth       substack     password-auth'
  when:
    - inventory_hostname not in totp.machines | default([])
    - inventory_hostname not in pam_weblogin.machines | default([])
  become: true

- name: Disable TOTPs for MFA.
  ansible.builtin.include_tasks:
    file: disable_totps.yml
  when: inventory_hostname not in totp.machines | default([])

- name: Disable pam plugin for web logins.
  ansible.builtin.include_tasks:
    file: disable_pam_weblogin.yml
  when: inventory_hostname not in pam_weblogin.machines | default([])

- name: Enable TOTPs for MFA.
  ansible.builtin.include_tasks:
    file: enable_totps.yml
  when: inventory_hostname in totp.machines | default([])

- name: Enable pam plugin for web logins.
  ansible.builtin.include_tasks:
    file: enable_pam_weblogin.yml
  when: inventory_hostname in pam_weblogin.machines | default([])

- name: Deploy config files for patched system wide crypto policies.
  ansible.builtin.template:
    src: "{{ item }}.pmod"
    dest: "/etc/crypto-policies/policies/modules/{{ item }}.pmod"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ sshd_crypto_policies }}"
  notify: update-crypto-policies
  become: true
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "8"

- name: Disable extra sshd config files we do not want to use.
  ansible.builtin.shell:
    cmd: |
         mv "/etc/ssh/sshd_config.d/{{ item }}"{,.disabled}
    removes: "/etc/ssh/sshd_config.d/{{ item }}"
    creates: "/etc/ssh/sshd_config.d/{{ item }}.disabled"
  loop:
    - 50-cloud-init.conf
    - 50-redhat.conf
  notify: restart_sshd
  become: true
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "8"

- name: Deploy main sshd config.
  ansible.builtin.template:
    src: templates/sshd_config
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: '0600'
    validate: '/usr/sbin/sshd -T -C user=root -C host=localhost -C addr=localhost -C lport=22 -f %s'
  notify: restart_sshd
  become: true

- name: Deploy extra sshd config to use patched system wide crypto policy.
  ansible.builtin.template:
    src: 50-crypto-policies.conf
    dest: /etc/ssh/sshd_config.d/50-crypto-policies.conf
    owner: root
    group: root
    mode: '0600'
    validate: '/usr/sbin/sshd -T -C user=root -C host=localhost -C addr=localhost -C lport=22 -f %s'
  notify: restart_sshd
  become: true
  when:
    - ansible_facts['os_family'] == "RedHat"
    - ansible_facts['distribution_major_version'] >= "8"

#
# All Diffie-Hellman moduli used for diffie-hellman-group-exchange-sha256 should be at least sshd_moduli_minimum bit long.
# See also man moduli.
# Moduli are stored in /etc/ssh/moduli
# The 5th column of this file contains the length of the moduli.
#
- name: Check if /etc/ssh/moduli contains weak (small) values.
  ansible.builtin.shell: awk '$5 < {{ sshd_moduli_minimum }}' /etc/ssh/moduli
  register: sshd_register_moduli
  changed_when: false
  check_mode: false
  become: true

- name: Remove weak (small) values from /etc/ssh/moduli.
  ansible.builtin.shell: awk '$5 >= {{ sshd_moduli_minimum }}' /etc/ssh/moduli > /etc/ssh/moduli.new ;
         [ -r /etc/ssh/moduli.new -a -s /etc/ssh/moduli.new ] && mv /etc/ssh/moduli.new /etc/ssh/moduli || true
  when: sshd_register_moduli.stdout | length > 1
  changed_when: sshd_register_moduli.stdout | length > 1
  notify: restart_sshd
  become: true

- name: Check permissions on /etc/ssh/moduli.
  ansible.builtin.file:
    path: /etc/ssh/moduli
    state: file
    owner: root
    group: root
    mode: '0640'
  become: true

- name: Populate service facts.
  ansible.builtin.service_facts:

- name: Disable PC/SC Smart Cards for authentication as we do not use them on servers.
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: stopped
    enabled: false
    daemon_reload: true
  with_items:
    - pcscd.service
    - pcscd.socket
  when:
    - ansible_facts.services is defined
    # The ansible.builtin.service_facts task only registers systemd units with names that ends in .service
    # Therefore we assume pcscd.socket also exists if pcscd.service exists in ansible_facts.services.
    - "'pcscd.service' in ansible_facts.services"
  become: true
...
