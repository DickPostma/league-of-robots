---
- name: "Get the list of namingContexts from all databases"
  community.general.ldap_search:
    server_uri: "ldapi://%2Fvar%2Frun%2Fslapd%2Fldapi"
    dn: "olcDatabase={% raw %}{{% endraw %}{{ item }}{% raw %}}{% endraw %}mdb,cn=config"
  loop: "{{ range(1, ldap_domains | community.general.json_query('*.ldap_db_index') | max + 1) }}"
  failed_when: false # it's not an error if database does not exist
  changed_when: false
  register: ldap_naming_contexts
  become: true

- name: "Find example database that contains definitions of 'dc=my-domain,dc=com' and remove it"
  community.general.ldap_entry:
    server_uri: "ldapi://%2Fvar%2Frun%2Fslapd%2Fldapi"
    dn: "olcDatabase={% raw %}{{% endraw %}{{ item.item }}{% raw %}}{% endraw %}mdb,cn=config"
    state: absent
    recursive: true
    objectClass:
      - olcDatabaseConfig
      - olcMdbConfig
  loop: "{{ ldap_naming_contexts.results }}"
  when:
    - "item.results is defined"
    - "'dc=my-domain,dc=com' in item.results | to_json"
  become: true

- name: "Create the folder structure for the scripts"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  loop:
    - path: /opt/perun/
      owner: root
      group: lsaai
      mode: '0750'
    - path: /etc/perun/ldap_lsaai.d/
      owner: root
      group: lsaai
      mode: '0750'
  become: true

- name: "Install configuration scripts"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop:
    - src: 'pre_10_setup_connection'
      dest: '/etc/perun/ldap_lsaai.d/pre_10_setup_connection'
      mode: '0640'
      owner: root
      group: lsaai
    - src: 'process-ldap_lsaai.sh'
      dest: '/opt/perun/bin/process-ldap_lsaai.sh'
      mode: '0750'
      owner: root
      group: lsaai
    - src: 'perunv3.conf'
      dest: '/etc/perunv3.conf'
      mode: '0640'
      owner: root
      group: lsaai
  become: true

- name: "Collect the status of important files and directories"
  ansible.builtin.stat:
    path: "{{ item }}"
  register: collect_status
  loop:
    - /etc/perun/ldap_lsaai.d/
    - /etc/perunv3.conf
    - /etc/perun/ldap_lsaai.d/pre_10_setup_connection
    - /opt/perun/bin/process-ldap_lsaai.sh
  become: true

- name: "Check that important files and directories are in place"
  ansible.builtin.fail:
    msg: "Path '{{ item.item }}'"
  when:
    - item.stat.exists is false
  loop: "{{ collect_status.results }}"
  loop_control:
    label: "{{ item.stat.exists }}"

- name: Duplicate the ldap > ldap_lsaai in /opt/perun/lib/
  ansible.builtin.copy:
    src: /opt/perun/lib/ldap/
    dest: /opt/perun/lib/ldap_lsaai/
    owner: root
    group: lsaai
    mode: '0750'
    remote_src: true
  become: true


- name: Deploy LDIF files for configuring LSAAI ldap
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/tmp/configure_lsaai-{{ item }}"
    owner: lsaai
    group: lsaai
    mode: '0600'
  with_items:
    - ldap_groups_ou.ldif
    - ldap_users_ou.ldif
  register: lsaii_ldif_deploy
  notify: lsaai_ldapadd
  become: true

- name: Check the ldap server if the configuration have already been done
  ansible.builtin.shell:
    cmd: >
      set -o pipefail &&
      /usr/local/openldap/bin/ldapsearch -x -H "ldap://localhost"
      -D "{{ ldap_credentials['stack']['admin']['dn'] }}"
      -b "{{ item }},{{ ldap_domains['stack']['base'] }}"
      -w "{{ ldap_credentials['stack']['admin']['pw'] }}"
      -LLL "ou=perun" | grep -q 'dn:'
  register: lsaai_ldapsearch
  failed_when: lsaai_ldapsearch.rc > 1
  changed_when: lsaai_ldapsearch.rc == 1
  loop:
    - ou=groups
    - ou=users
  notify: lsaai_ldapadd
  become: true
  become_user: lsaai

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Check the ldap server if the configuration is now correctly deployed
  ansible.builtin.shell:
    cmd: >
      set -o pipefail &&
      /usr/local/openldap/bin/ldapsearch -x -H "ldap://localhost"
      -D "{{ ldap_credentials['stack']['admin']['dn'] }}"
      -b "{{ item }},{{ ldap_domains['stack']['base'] }}"
      -w "{{ ldap_credentials['stack']['admin']['pw'] }}"
      -LLL "ou=perun" | grep -q 'dn:'
  register: lsaai_ldapsearch_again
  failed_when: lsaai_ldapsearch_again.rc == 1
  changed_when: false
  when: lsaai_ldapsearch.changed # noqa: no-handler
  loop:
    - ou=groups
    - ou=users
  become: true
  become_user: lsaai
...
