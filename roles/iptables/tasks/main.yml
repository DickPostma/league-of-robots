#
# This role configures host-based firewalls using iptables.
# We first create a list of IPv4 addresses used by a host and determine if these addresses are publicly exposed:
#  * either a public IP address
#  * or a publicly exposed private address: traffic from a flaoting public IP is routed to this private IP. 
# Next we fetch the network interface names for all all publicly exposed addresses:
#  * internal interfaces = those who do not use a publicly exposed IP address.
#  * external interfaces = those who do use a publicly exposed IP address.
# Finally we configure the IPv4 firewall to:
#  * allow anything over internal interfaces (including loopback interfaces).
#  * disable anything by default except for specific services on specific ports to/from specific subnets.
#    A subnet is specified with mask as [0-9].[0-9].[0-9].[0-9]/[0-9] and may contain one or more IP addresses.
#    E.g. 111.111.111.111/32 is the single machine 111.111.111.111
#    and 111.111.111.0/24 is the range from 111.111.111.1 up to and including 111.111.111.254.
# Finally we configure the IPv6 firewall to:
#  * allow anything over the loopback interface.
#  * disable anything else over any other interface both internal and external.
#
---
- name: Install iptables with yum.
  ansible.builtin.yum:
    state: latest
    update_cache: yes
    name:
      - 'iptables'
      - 'iptables-services'
      #### ToDo: fail2ban
  notify: restart_iptables
  become: true

- name: Enable netfilter kernel module for FTP connection tracking.
  ansible.builtin.lineinfile:
    path: '/etc/sysconfig/iptables-config'
    regexp: '^IPTABLES_MODULES='
    line: 'IPTABLES_MODULES="nf_conntrack_ftp"'
  notify:
    - restart_iptables
    - configure_iptables
  become: true

- name: Create lists of public IP addresses.
  ansible.builtin.set_fact:
    public_ip_addresses: "{{ ansible_facts | dict2items
      | json_query('[*].value.ipv4.address')
      | map('ansible.utils.ipaddr', 'public') | list
      | reject('==', None) | list }}"

- name: Create lists of publicly exposed, private IP addresses.
  ansible.builtin.set_fact:
    publicly_exposed_internal_ip_addresses: "{{ all_ip_addresses[inventory_hostname] | dict2items
      | json_query('[?value.publicly_exposed].value.address')
      | list }}"

- name: Create lists of all publicly exposed IP addresses that need to be firewalled.
  ansible.builtin.set_fact:
    all_publicly_exposed_ip_addresses: "{{ public_ip_addresses | default([]) }} + {{ publicly_exposed_internal_ip_addresses | default([]) }}"

- name: Create lists of internal and external network interfaces.
  ansible.builtin.set_fact:
    internal_interfaces: "{{ ansible_facts | dict2items
      | selectattr('value.ipv4.address', 'defined')
      | rejectattr('value.ipv4.address', 'in', all_publicly_exposed_ip_addresses)
      | map(attribute='value.device') | list }}"
    external_interfaces: "{{ ansible_facts | dict2items
      | selectattr('value.ipv4.address', 'defined')
      | selectattr('value.ipv4.address', 'in', all_publicly_exposed_ip_addresses)
      | map(attribute='value.device') | list }}"

- name: 'INFO: List discovered IP addressess and network interfaces.'
  ansible.builtin.debug:
    msg: |
         All publicly exposed IP addresses: {{ all_publicly_exposed_ip_addresses }}.
         Internal interfaces:  {{ internal_interfaces }}.
         External interfaces:  {{ external_interfaces }}.

- name: Deploy firewall configuration script.
  ansible.builtin.template:
    src: 'iptables-init.bash.j2'
    dest: '/etc/sysconfig/iptables-init.bash'
    owner: root
    group: root
    mode: 0700
  notify: configure_iptables
  become: true

- name: Configure the firewall service.
  ansible.builtin.service:
    name: "{{ item }}"
    state: 'started'
    enabled: 'yes'
    daemon_reload: 'yes'
  with_items:
     - 'iptables'
     - 'ip6tables'
  notify: configure_iptables
  become: true

- name: Flush handlers for iptables role.
  ansible.builtin.meta: flush_handlers

- name: Disable other firewalls.
  ansible.builtin.import_tasks: disable-other-firewalls.yml
  when: iptables_disable_firewalld or iptables_disable_ufw
...
