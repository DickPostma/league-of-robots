---
- name: Get information on CA key from local machine
  ansible.builtin.stat:
    path: "{{ rsyslog_local_dir }}/{{ rsyslog_ca_key_file }}"
    checksum_algorithm: sha1
  register: local_rsyslog_ca_key
  delegate_to: localhost
  connection: local

- name: Get information on CA certificate from local machine
  ansible.builtin.stat:
    path: "{{ rsyslog_local_dir }}/{{ rsyslog_ca_cert_file }}"
    checksum_algorithm: sha1
  register: local_rsyslog_ca_cert
  delegate_to: localhost
  connection: local

- name: Get information on CA key on rsyslog server
  ansible.builtin.stat:
    path: "{{ rsyslog_remote_path_key_dir }}/{{ rsyslog_ca_key_file }}"
    checksum_algorithm: sha1
  register: remote_rsyslog_ca_key
  become: true

- name: Get information on CA cert on rsyslog server
  ansible.builtin.stat:
    path: "{{ rsyslog_remote_path_cert_dir }}/{{ rsyslog_ca_key_file }}"
    checksum_algorithm: sha1
  register: remote_rsyslog_ca_cert

- name: 'Install rsyslog and gnutls, with all the plugins'
  ansible.builtin.yum:
    name:
      - rsyslog
      - rsyslog-gnutls
      - gnutls
      - gnutls-utils
      - python-firewall
      - firewalld
    state: latest
    update_cache: true
  become: true

- name: If local and remote keys and certificate are missing, then create CA
  ansible.builtin.include: create_ca.yml
  run_once: true
  when:
    ( not local_rsyslog_ca_key.stat.exists and not remote_rsyslog_ca_key.stat.exists ) or
    ( not local_rsyslog_ca_cert.stat.exists and not remote_rsyslog_ca_cert.stat.exists)
  notify: restart-rsyslog.service

- name: If local CA key exists, then deploy it
  ansible.builtin.copy:
    src: "{{ rsyslog_local_dir }}/{{ rsyslog_ca_key_file }}"
    dest: "{{ rsyslog_remote_path_key_dir }}/{{ rsyslog_ca_key_file }}"
    mode: '0600'
    decrypt: true
    force: true
  become: true
  # when: local_rsyslog_ca_key.stat.exists and not remote_rsyslog_ca_key.stat.exists
  notify: restart-rsyslog.service

- name: If local CA certificate exists, then deploy it
  ansible.builtin.copy:
    src: "{{ rsyslog_local_dir }}/{{ rsyslog_ca_cert_file }}"
    dest: "{{ rsyslog_remote_path_cert_dir }}/{{ rsyslog_ca_cert_file }}"
    mode: '0644'
    decrypt: false
    force: true
  become: true
  # when: local_rsyslog_ca_cert.stat.exists and not remote_rsyslog_ca_cert.stat.exists
  notify: restart-rsyslog.service

- name: Deploy rsyslog.conf file into remote system /etc/
  ansible.builtin.template:
    src: roles/rsyslog_server/templates/rsyslog.conf
    dest: /etc/rsyslog.conf
    force: true
    mode: 0644
  become: true
  notify: restart-rsyslog.service

- name: Open tcp port {{ rsyslog_port | default('514') }}
  ansible.posix.firewalld:
    port: "{{ rsyslog_port | default('514') }}/tcp"
    permanent: true
    state: enabled
  become: true

- name: Start and enable rsyslog service if they are not
  ansible.builtin.systemd:
    name: rsyslog.service
    state: started
    enabled: true
  become: true
...
