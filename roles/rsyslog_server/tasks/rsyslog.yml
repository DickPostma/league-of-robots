---
- name: Get information on CA key from the repo
  ansible.builtin.stat:
    path: "{{ rsyslog_repository_dir }}/{{ rsyslog_ca_key_file }}"
  register: repo_rsyslog_ca_key
  delegate_to: localhost
  connection: local

- name: Get information on CA certificate from the repo
  ansible.builtin.stat:
    path: "{{ rsyslog_repository_dir }}/{{ rsyslog_ca_cert_file }}"
  register: repo_rsyslog_ca_cert
  delegate_to: localhost
  connection: local

- name: Get information on CA key from managed rsyslog server
  ansible.builtin.stat:
    path: "{{ rsyslog_remote_path_key_dir }}/{{ rsyslog_ca_key_file }}"
  register: rsyslog_ca_key_on_server
  become: true

- name: Get information on CA cert from managed rsyslog server
  ansible.builtin.stat:
    path: "{{ rsyslog_remote_path_cert_dir }}/{{ rsyslog_ca_key_file }}"
  register: rsyslog_ca_cert_on_server

- name: 'Install rsyslog and gnutls, with all the plugins'
  ansible.builtin.yum:
    name:
      - rsyslog
      - rsyslog-gnutls
      - gnutls
      - gnutls-utils
      - python-firewall
      - firewalld
    state: latest
    update_cache: true
  become: true

- name: If rsyslog keys and certificate in repository and on server are missing, then create CA
  ansible.builtin.include_tasks: create_ca.yml
  run_once: true
  when:
    ( not repo_rsyslog_ca_key.stat.exists and not rsyslog_ca_key_on_server.stat.exists ) or
    ( not repo_rsyslog_ca_cert.stat.exists and not rsyslog_ca_cert_on_server.stat.exists)
  register: created_ca
  notify: restart-rsyslog.service

- name: If CA key exists in repository, then deploy it
  ansible.builtin.copy:
    src: "{{ rsyslog_repository_dir }}/{{ rsyslog_ca_key_file }}"
    dest: "{{ rsyslog_remote_path_key_dir }}/{{ rsyslog_ca_key_file }}"
    mode: '0600'
    decrypt: true
    force: true
  become: true
  when: repo_rsyslog_ca_key.stat.exists
  notify: restart-rsyslog.service

- name: If CA certificate exists in repository, then deploy it
  ansible.builtin.copy:
    src: "{{ rsyslog_repository_dir }}/{{ rsyslog_ca_cert_file }}"
    dest: "{{ rsyslog_remote_path_cert_dir }}/{{ rsyslog_ca_cert_file }}"
    mode: '0644'
    decrypt: false
    force: true
  become: true
  when: repo_rsyslog_ca_cert.stat.exists
  notify: restart-rsyslog.service

- name: Fetch remote CA key to repository
  ansible.builtin.fetch:
    src: "{{ rsyslog_remote_path_key_dir }}/{{ rsyslog_ca_key_file }}"
    dest: "{{ rsyslog_repository_dir }}/"
    flat: true
    fail_on_missing: true
    validate_checksum: true
  when: not repo_rsyslog_ca_key.stat.exists or created_ca.changed # noqa no-handler
  become: true

- name: Fetch servers CA cert to repository
  ansible.builtin.fetch:
    src: "{{ rsyslog_remote_path_cert_dir }}/{{ rsyslog_ca_cert_file }}"
    dest: "{{ rsyslog_repository_dir }}/"
    flat: true
    fail_on_missing: true
    validate_checksum: true
  when: not repo_rsyslog_ca_cert.stat.exists or created_ca.changed # noqa no-handler
  become: true

- name: Deploy rsyslog.conf
  ansible.builtin.template:
    src: roles/rsyslog_server/templates/rsyslog.conf
    dest: /etc/rsyslog.conf
    force: true
    mode: '0644'
  become: true
  notify: restart-rsyslog.service

- name: Open incoming rsyslog tcp port
  ansible.posix.firewalld:
    port: "{{ hostvars[inventory_hostname].rsyslog_port | default('514', true) }}/tcp"
    permanent: true
    immediate: true
    state: enabled
  become: true

- name: Start and enable rsyslog service
  ansible.builtin.systemd:
    name: rsyslog.service
    state: started
    enabled: true
  become: true
...
