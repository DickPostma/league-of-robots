#!/bin/bash

# 2022-08-22 initial script
# 2022-08-23 added options: type, keepversions and destionation, shellcheck done
# 2022-08-24 added logging, debugging
# 2022-08-28 improved logging, worked on initial backup
# {% raw %}

set -e
set -u 
set -o pipefail

if [ "${#}" -ne 5 ]; then
   echo "${0} \"name\" \"frequencyname\" \"keep\" \"/this/will/be/backed/up\" \"/destination/path\""
   echo "   name                [string] name of the backup (creates subdirectory main>name)"
   echo "   frequencyname       [string] frequency name of backup (creates subdirectory main>name>frequency)"
   echo "   keep                [number] how many backups to keep for this frequency"
   echo "   /source/...         [/path/...] to the folder that you would like to backup"
   echo "   /main/bckp/dst/...  [/path/...] to the *main* backup folder to keep all the backups"
   exit 1 
fi

# Get script arguments
backup_name="${1}"
backup_frequency="${2}"
keep_versions="${3}"
main_backup_destination="${5}"

current_time="$(date +%Y%m%d_%H%M%S)"

log_file="${main_backup_destination}/${backup_name}/log"
touch "${log_file}"
original_directory="$(pwd)"

# Check the if source directory exists and is readble
if ! test -r "${4}"; then
  echo "Error, (source) directory for backing up cannot be read/does not exist:"
  echo " -> ${4}"
  exit 255
else
  backup_source_formatted="$(cd "${4}" && pwd)"
fi

# Check if the main destination backup folder exist
if ! test -d "${main_backup_destination}/${backup_name}"; then
  echo "Error, one or more (destination) directories do not exist:"
  echo " -> ${main_backup_destination}/${backup_name}"
  exit 255
fi

frequency_dir="${main_backup_destination}/${backup_name}/${backup_frequency}"
# Check the destination subdirectories and create them if missing
# Assemble the destination directory path, but do not create directory yet
destination_dir="${frequency_dir}/${current_time}/${backup_name}/"

test -d "${frequency_dir}" || mkdir "${frequency_dir:-}"

# Clean old logs (and keep only last 1024 lines)
log_short="$(tail -n 1024 "${log_file}")"
echo "${log_short}" > "${log_file}"

# Clean old backups
# list daily versions, sort by time, and keep only number of them, rest delete
# ! -path . suppreses '.' from output
purge_list="$(cd "${frequency_dir}" && find . -maxdepth 1 ! -path . -type d -printf '%T@ %f\n' | sort -r | cut -d' ' -f2- | tail -n +"${keep_versions}")"
if [[ ! -z "${purge_list}" ]]; then echo -e "${current_time}: purging ${purge_list}" >> "${log_file}"; fi
# ! -path . suppreses '.' from output
cd "${frequency_dir}" && find . -maxdepth 1 ! -path . -type d -printf '%T@ %f\n' | sort -r | cut -d' ' -f2- | tail -n +"$((keep_versions + 1))" | xargs -I {} rm -rf -- ./{}

# FIND LAST DAILY BACKUP
# sort by modification time, newest first
# ! -path . suppreses '.' from output
latest_backup="$(cd "${frequency_dir}" && find . -maxdepth 1 ! -path . -type d -printf '%T@ %f\n' | sort -r | cut -d' ' -f2- | head -n 1)" # take first

# Assemble the command for initial vs incremental backup
if [[ -z "${latest_backup}" ]]; then # first backup = simple copy, as no lattest directory found
   backup_command="rsync -aqH --protect-args --delete ${backup_source_formatted}/ ${destination_dir}/."
else # make the incremental backup with hard-link against latest
   # (link-dest has relative path against the new backup folder)
   backup_command="rsync -aqH --protect-args --delete ${backup_source_formatted}/ ${destination_dir}/. --link-dest=../../${latest_backup}/${backup_name}/"
fi

# Make the destination directory
mkdir -p "${destination_dir}"
# Log the backup command
echo "${current_time}: ${backup_command}" >> "${log_file}"
# Execute the command
eval "${backup_command}"

cd "${original_directory}" # return to home directory
# {% endraw %}
