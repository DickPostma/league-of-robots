---
#- debug: msg="{{ hostvars[inventory_hostname]['host_networks'] | selectattr('name', 'equalto', stack_prefix ~ '_internal_management') | map(attribute='assign_floating_ip', default=false) | bool }}"
#- meta: end_play
- name: "Create internal network interfaces"
  block:
    # Internal IP only - without public IP's
    - name: Create an internal only network interface and dynamically assign IP
      azure.azcollection.azure_rm_networkinterface:
        resource_group: "{{ azure_resource_group }}"
        name: "{{ inventory_hostname }}-{{ item.name }}_nic"
        location: "{{ azure_location }}"
        ip_configurations:
          - name: "az0"
        subnet_name: "{{ item.name }}_subnet"
        virtual_network: "{{ item.name }}"
        enable_accelerated_networking: true
        security_group: "{{ item.security_group }}"
        create_with_security_group: false # default is true, but we already created it
      register: nic
      with_items: "{{ hostvars[inventory_hostname]['host_networks'] }}"
      when:
        - ip_addresses[inventory_hostname][item.name]['address'] is not defined
        - item.assign_floating_ip is not defined

    - name: Create an internal only network interface and assign existing IP
      azure.azcollection.azure_rm_networkinterface:
        resource_group: "{{ azure_resource_group }}"
        name: "{{ inventory_hostname }}-{{ item.name }}_nic"
        location: "{{ azure_location }}"
        ip_configurations:
          - name: "az0"
            private_ip_address: "{{ ip_addresses[inventory_hostname][item.name]['address'] }}"
        subnet_name: "{{ item.name }}_subnet"
        virtual_network: "{{ item.name }}"
        enable_accelerated_networking: true
        security_group: "{{ item.security_group }}"
        create_with_security_group: false # default is true, but we already created it
      register: nic
      with_items: "{{ hostvars[inventory_hostname]['host_networks'] }}"
      when:
        - ip_addresses[inventory_hostname][item.name]['address'] is defined
        - item.assign_floating_ip is not defined

    # With Public IP's
    - name: Create public IP
      azure.azcollection.azure_rm_publicipaddress:
        resource_group: "{{ azure_resource_group }}"
        location: "{{ azure_location }}"
        name: "{{ inventory_hostname }}-{{ item.name }}_public_ip"
        allocation_method: Static
        sku: Standard
      register: public_ip
      with_items: "{{ hostvars[inventory_hostname]['host_networks'] }}"
      when: item.assign_floating_ip is defined

    - name: Create an internal only network interface and dynamically assign IP
      azure.azcollection.azure_rm_networkinterface:
        resource_group: "{{ azure_resource_group }}"
        name: "{{ inventory_hostname }}-{{ item.name }}_nic"
        location: "{{ azure_location }}"
        ip_configurations:
          - name: "az0"
        subnet_name: "{{ item.name }}_subnet"
        virtual_network: "{{ item.name }}"
        enable_accelerated_networking: true
        security_group: "{{ item.security_group }}"
        create_with_security_group: false # default is true, but we already created it
      register: nic
      with_items: "{{ hostvars[inventory_hostname]['host_networks'] }}"
      when:
        - ip_addresses[inventory_hostname][item.name]['address'] is not defined
        - item.assign_floating_ip is defined

    - name: Create an internal only network interface and assign existing IP
      azure.azcollection.azure_rm_networkinterface:
        resource_group: "{{ azure_resource_group }}"
        name: "{{ inventory_hostname }}-{{ item.name }}_nic"
        location: "{{ azure_location }}"
        ip_configurations:
          - name: "az0"
            private_ip_address: "{{ ip_addresses[inventory_hostname][item.name]['address'] }}"
          - name: "pub0"
            public_ip_address_name: "{{ inventory_hostname }}-{{ item.name }}_public_ip"
        subnet_name: "{{ item.name }}_subnet"
        virtual_network: "{{ item.name }}"
        enable_accelerated_networking: true
        security_group: "{{ item.security_group }}"
        create_with_security_group: false # default is true, but we already created it
      register: nic
      with_items: "{{ hostvars[inventory_hostname]['host_networks'] }}"
      when:
        - ip_addresses[inventory_hostname][item.name]['address'] is defined
        - item.assign_floating_ip is defined

- set_fact:
    public_keys: |
      {% for public_key in public_keys_of_local_admins %}
      {% if 'ssh-rsa' not in public_key %}
      - path: "/home/{{ cloud_user }}/.ssh/authorized_keys"
        key_data: {{ public_key }}
      {% endif %}
      {% endfor %}

- name: Create an Azure VM
  azure.azcollection.azure_rm_virtualmachine:
    resource_group: "{{ azure_resource_group }}"
    name: "{{ inventory_hostname }}"
    location: "{{ azure_location }}"
    vm_size: "{{ azure_flavor }}"
    admin_username: "{{ cloud_user }}"
    ssh_password_enabled: false
    ssh_public_keys: "{{ public_keys | from_yaml }}"
    custom_data: |
      #jinja2: trim_blocks:True, lstrip_blocks:True
      #cloud-config
      password: "{{ cloud_console_pass }}"
      chpasswd: { expire: False }
      #
      # Add each entry to ~/.ssh/authorized_keys for the configured user
      # or the first user defined in the user definition directive.
      #
      ssh_authorized_keys:
      {% for public_key in public_keys_of_local_admins %}
        {% if 'ssh-rsa' not in public_key %}
        - {{ public_key }}
        {% endif %}
      {% endfor %}
    network_interfaces: "{{ inventory_hostname}}_nic"
#    storage_container: "{{ inventory_hostname}}_blobs"
#    storage_blob: "{{ inventory_hostname}}_osdisk.vhd"
    managed_disk_type: Standard_LRS
#    boot_diagnostics:
#      enabled: true
    image:
      offer: "{{ azure_image[os_distribution].offer }}"
      publisher: "{{ azure_image[os_distribution].publisher }}"
      sku: "{{ azure_image[os_distribution].sku }}"
      version: "{{ azure_image[os_distribution].version }}"
    plan:
      name: "{{ azure_image[os_distribution].sku }}"
      product: "{{ azure_image[os_distribution].offer }}"
      publisher: "{{ azure_image[os_distribution].publisher }}"
    started: false
#TODO   started: true


# - name: Create managed disk
#   azure_rm_manageddisk:
#     name: "{{ inventory_hostname }}_mymanaged_disk"
#     location: "{{ azure_location }}"
#     resource_group: "{{ azure_resource_group }}"
#     disk_size_gb: "{{ local_volume_size_extra }}"
#   when: local_volume_size_extra is defined and local_volume_size_extra > 0

- name: Mount the managed disk to VM
  azure.azcollection.azure_rm_manageddisk:
    name: "{{ inventory_hostname }}_managed_disk_{{ local_volume_size_extra }}g"
    location: "{{ azure_location }}"
    resource_group: "{{ azure_resource_group }}"
    disk_size_gb: "{{ local_volume_size_extra }}"
    managed_by: "{{ inventory_hostname }}"
    attach_caching: read_only
  when: local_volume_size_extra is defined and local_volume_size_extra > 0
...
