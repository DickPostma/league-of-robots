---
- name: Install yum requirements for gpu driver installation
  ansible.builtin.yum:
    state: 'installed'
    update_cache: true
    name:
      - tar
      - bzip2
      - make
      - automake
      - gcc
      - gcc-c++
      - pciutils
      - elfutils-libelf-devel
      - libglvnd-devel
      - bind-utils
      - wget
  become: true

- name: Gather facts to get the latest kernel version
  ansible.builtin.setup:
  become: true

- name: Install kernel developement package matching running kernel version
  ansible.builtin.yum:
    name: 'kernel-devel-{{ ansible_kernel }}'
  register: yum_result
  failed_when: yum_result.rc != 0
  when: true
  become: true

- name: Download a driver installation file from NVidia
  ansible.builtin.get_url:
    url: '{{ gpu_url_dir }}/{{ gpu_runfile }}'
    dest: '/root/{{ gpu_runfile }}'
    mode: '0700'
  become: true

- name: Install driver from .run file
  ansible.builtin.command: '/root/{{ gpu_runfile }} --silent --driver'
  register: install_result
  failed_when: install_result.rc != 0
  when: true
  become: true

- name: Remove installation file
  ansible.builtin.file:
    path: '/root/{{ gpu_runfile }}'
    state: absent
  become: true

- name: 'Add nvidia group.'
  ansible.builtin.group:
    name: '{{ nvidia_group }}'
    gid: '{{ nvidia_gid }}'
  become: true

- name: 'Add nvidia user.'
  ansible.builtin.user:
    name: '{{ nvidia_user }}'
    uid: '{{ nvidia_uid }}'
    group: '{{ nvidia_group }}'
    system: true
    shell: /sbin/nologin
    create_home: false
  become: true

- name: Install NVidia persistence service
  ansible.builtin.template:
    src: nvidia-persistenced.service
    dest: /etc/systemd/system/nvidia-persistenced.service
    owner: root
    group: root
    mode: '0644'
  become: true
  notify: 'nvidia_service'

- name: Copy blacklist-nouveau.conf file into modprobe.d to disable Nouveau drivers
  ansible.builtin.copy:
    src: blacklist-nouveau.conf
    dest: /etc/modprobe.d/blacklist-nouveau.conf
    owner: root
    group: root
    mode: '0644'
  become: true
  notify: 'reboot_server'

- name: Enforce reboot, so that we can check if drivers are correctly installed
  ansible.builtin.meta: flush_handlers

- name: Final check to confirm all devices are working
  ansible.builtin.command: 'nvidia-smi -L'
  register: smi
  when: true
  changed_when: false
  failed_when: ( smi.rc != 0) or
               ( smi.stdout|default([])|lower|regex_findall('nvidia')|length != gpu_count )
  become: false    # running nvidia-smi as root stops the service
...
