---
- name: Install yum requirements for gpu driver installation
  ansible.builtin.yum:
    state: 'installed'
    update_cache: true
    name:
      - tar
      - bzip2
      - make
      - automake
      - gcc
      - gcc-c++
      - pciutils
      - elfutils-libelf-devel
      - libglvnd-devel
      - bind-utils
      - wget
  become: true

# # ansible_kernel variable is not working, as after reboot, still holds old kernel
# - name: Get current kernel version
#   ansible.builtin.command: '/usr/bin/uname -r'
#   register: uname_output
#   failed_when: uname_output.rc != 0
#   when: true
#   become: true
# - name: Set kernel version fact
#   ansible.builtin.set_fact:
#     kernel_version: "{{ uname_output.stdout }}"

- name: Gather facts to get the latest kernel version
  ansible.builtin.setup:
  become: true

- name: Install kernel developement package matching running kernel version
  ansible.builtin.yum:
    name: 'kernel-devel-{{ ansible_kernel }}'
  register: yum_result
  failed_when: yum_result.rc != 0
  when: true
  become: true

- name: Download a driver installation file from NVidia
  ansible.builtin.get_url:
    url: '{{ gpu_url_dir }}/{{ gpu_runfile }}'
    dest: '/root/{{ gpu_runfile }}'
    mode: '0700'
  become: true

- name: Install driver from .run file
  ansible.builtin.command: '/root/{{ gpu_runfile }} --silent --driver'
  register: install_result
  failed_when: install_result.rc != 0
  when: true
  become: true

# - name: Remove installation file
#   ansible.builtin.file:
#     path: '/root/{{ gpu_runfile }}'
#     state: absent
#   become: true

- name: Copy blacklist-nouveau.conf file into modprobe.d to disable Nouveau drivers
  ansible.builtin.copy:
    src: blacklist-nouveau.conf
    dest: /etc/modprobe.d/blacklist-nouveau.conf
    owner: root
    group: root
    mode: '0644'
  become: true
  notify: 'reboot_server'

# - name: Install NVidia persistence service
#   ansible.builtin.copy:
#     src: nvidia-persistenced.service
#     dest: /etc/systemd/system/nvidia-persistenced.service
#   become: true
#   notify: 'reboot_server'

# - name: Enable a nvidia-persistenced service
#   ansible.builtin.systemd:
#     name: nvidia-persistenced.service
#     state: started
#     enabled: true
#   become: true
#   notify: 'reboot_server'

- name: Enforce reboot, so that we can check if drivers are correctly installed
  ansible.builtin.meta: flush_handlers

- name: Count the number of available nvidia devices
  # ansible.builtin.command: '/usr/bin/ls /dev/nvidia[0-9]{,[0-9]'
  ansible.builtin.command: 'lspci'
  register: lspci
  when: true
  changed_when: false
  become: true

- name: Check that nvidia-smi sees all devices
  ansible.builtin.command: 'nvidia-smi -L'
  register: smi
  when: true
  changed_when: false
  failed_when: ( smi.rc > 0) or
               ( lspci.stdout|lower|regex_findall('nvidia')|length != smi.stdout|lower|regex_findall('nvidia')|length )
  become: true
...
