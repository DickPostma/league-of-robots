#
#   1.   $> cd git/league-of-robots
# Create Python virtual environment (once)
#   2.   $> python3 -m venv openstacksdk.venv
# Activate virtual environment.
#   3.   $> source openstacksdk.venv/bin/activate
# Install OpenStack SDK (once).
#   4.   $> pip3 install openstacksdk
#        $> pip3 install ruamel.yaml
# NOTE: Openstack RC file must be sourced first to be able to use Openstack API from SDK:
#   5. Login to OpenStack web interface -> "Identity" -> "Application Credentials" -> click the "Create Application Credential" button.
#      This will result in a popup window: specify "Name", "Expiration Date", "Expiration Time", leave the rest empty / use defaults and
#      click the "Create Application Credential" button.
#      In the new popup window click the "Download openrc file" button and save the generated *-openrc.sh file in the root of the repo.
#   6. Source the downloaded file. E.g.:
#        $> source ./[Application_Credential_Name]-openrc.sh
#   7. Fetch Ansible dependencies
#        $> ansible-galaxy install -r galaxy-requirements.yml
# Configure this repo for deployment of a specifc HPC cluster.
#   8. Source lor-init from this repo. E.g.:
#        $> source ./lor-init
#   9. Configure League of Robots for a specific cluster. E.g.:
#        $> lor-config jenkins
#  10. Execute playbook to create VMs. E.g.:
#        $> ansible-playbook create-jenkins-server.yml
#
---
- name: 'Sanity checks before we start.'
  hosts: localhost
  connection: local
  pre_tasks:
    - name: 'Verify Ansible version meets requirements.'
      assert:
        that: "ansible_version.full is version_compare('2.10', '>=')"
        msg: 'You must update Ansible to at least 2.10.x to use this playbook.'
##############################################################################
# Create vxlans, router, security groups and other components we need
# before we can create Virtual Machines.
##############################################################################
- name: Create components required for creating VMs using OpenStack API.
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    #
    # Disable Ansible's interpretor detection logic,
    # which would fail to use the interpretor from an activated virtual environment.
    #
    - ansible_python_interpreter: python
  roles:
    - include_vars_from_other_groups
  tasks:
    - name: "Create {{ network_private_management_id }} network."
      openstack.cloud.network:
        state: present
        name: "{{ network_private_management_id }}"
        external: false
        wait: true
        timeout: "{{ openstack_api_timeout }}"
    - name: "Assign subnet to {{ network_private_management_id }} network."
      openstack.cloud.subnet:
        # 'name' must be the same as 'network_name' or else creating routers for this subnet will fail due to known bug.
        name: "{{ network_private_management_id }}"
        network_name: "{{ network_private_management_id }}"
        state: present
        cidr: "{{ network_private_management_cidr }}"
        # Bug: https://storyboard.openstack.org/#!/story/2008172
        # openstack.cloud.subnet is not idempotent and will fail when a router is present
        # and which is linked to the gateway_ip of the subnet.
        # In that case you must delete the router in order to be able to run this playbook,
        # which may require disassociating floating IPs first: yikes!
        gateway_ip: "{{ network_private_management_gw }}"
        enable_dhcp: true
        dns_nameservers: "{{ nameservers }}"
        wait: true
        timeout: "{{ openstack_api_timeout }}"
    - name: "Create router to bridge {{ network_public_external_id }} and {{ network_private_management_id }} networks."
      openstack.cloud.router:
        state: present
        name: "Router bridging {{ network_public_external_id }} and {{ network_private_management_id }}"
        network: "{{ network_public_external_id }}"
        interfaces:
          - "{{ network_private_management_id }}"
          #
          # Specifying only the network_private_management_id will fail when the default gateway IP
          # from that subnet is already in use. In that case we must specify an IP,
          # but there is no easy, safe way to determine which one we should use....
          #
          # - net: "{{ network_private_management_id }}"
          #   subnet: "{{ network_private_management_id }}"
          #   portip: 10.10.1.1
        wait: true
        timeout: "{{ openstack_api_timeout }}"
    #
    # Jenkins security group.
    #
    - name: "Create security group for jenkins server."
      openstack.cloud.security_group:
        state: present
        name: "{{ stack_prefix }}_webservers"
        description: |
                     Security group for jenkins webserver.
                     Allows SSH inbound on both port 22
                     Allows HTTP(S) on port 80 and 443.
                     Allows ICMP inbound.
                     Allows all outbound traffic.
        wait: true
        timeout: "{{ openstack_api_timeout }}"
    - name: "Add rules to {{ stack_prefix }}_webservers security group: allow inbound SSH from jumphosts."
      openstack.cloud.security_group_rule:
        security_group: "{{ stack_prefix }}_webservers"
        direction: ingress
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: "{{ remote_ip_address }}{{ remote_ip_netmask }}"
        wait: true
        timeout: "{{ openstack_api_timeout }}"
      vars:
        remote_ip_address: "{{ lookup('vars', item.0.group)['ip_addresses'][item.1.hostname][item.1.network]['address'] }}"
        remote_ip_netmask: "{{ lookup('vars', item.0.group)['ip_addresses'][item.1.hostname][item.1.network]['netmask'] }}"
      with_subelements:
        - "{{ jumphosts }}"
        - hosts
    - name: "Add rules to {{ stack_prefix }}_webservers security group: allow inbound HTTP(S) and ICMP."
      openstack.cloud.security_group_rule:
        security_group: "{{ stack_prefix }}_webservers"
        direction: ingress
        protocol: "{{ item.protocol }}"
        port_range_min: "{{ item.port }}"
        port_range_max: "{{ item.port }}"
        remote_ip_prefix: 0.0.0.0/0
        wait: true
        timeout: "{{ openstack_api_timeout }}"
      with_items:
        - protocol: tcp
          port: 80  # HTTP
        - protocol: tcp
          port: 443  # HTTPS
        - protocol: icmp
          port: -1  # ICMP protocol does not have any ports.
##############################################################################
# Configure Jenkins server(s) from inventory using Openstack API.
##############################################################################
- name: Create Jenkins server(s).
  hosts: jenkins
  connection: local
  gather_facts: false
  vars:
    #
    # Disable Ansible's interpretor detection logic,
    # which fails to use the interpretor from an activated virtual environment
    # and hence fails to find the OpenStackSDK if it was installed in a virtual environment.
    #
    - ansible_python_interpreter: python
  tasks:
    - name: Create Jenkins webserver.
      openstack.cloud.server:
        state: present
        name: "{{ inventory_hostname }}"
        image: "{{ cloud_image }}"
        flavor: "{{ cloud_flavor }}"
        security_groups: "{{ stack_prefix }}_webservers"
        auto_floating_ip: false
        nics:
          - net-name: "{{ network_private_management_id }}"
        userdata: |
          #cloud-config
          password: "{{ cloud_console_pass }}"
          chpasswd: { expire: False }
          #
          # Add each entry to ~/.ssh/authorized_keys for the configured user
          # or the first user defined in the user definition directive.
          #
          ssh_authorized_keys:
          {% for public_key in public_keys_of_local_admins %}  - {{ public_key }}
          {% endfor %}
        availability_zone: "{{ availability_zone }}"
        wait: true
        timeout: "{{ openstack_api_timeout }}"
      register: jenkins_webserver_vm
    - name: Assign floating IP to Jenkins webserver.
      openstack.cloud.floating_ip:
        server: "{{ inventory_hostname }}"
        state: present
        reuse: true
        network: "{{ network_public_external_id }}"
        nat_destination: "{{ network_private_management_id }}"
        wait: true
        timeout: "{{ openstack_api_timeout }}"
      #
      # Known bug https://github.com/ansible/ansible/issues/57451
      # openstack.cloud.floating_ip is not idempotent:
      # Succeeds only the first time and throws error on any subsequent calls.
      # Therefore we use a "when" with a silly complex jinja filter including a JMESpath query
      # to check if the VM already has a floating IP linked to an interface in the correct VXLAN.
      #
      when: (jenkins_webserver_vm.server.addresses | dict2items(key_name='vlan', value_name='specs') | json_query(query)) != network_private_management_id
      vars:
        query: '[?specs[?"OS-EXT-IPS:type"==`floating`]].vlan | [0]'
    - name: Make sure Jenkins webservers are started.
      openstack.cloud.server_action:
        action: start
        server: "{{ inventory_hostname }}"
        wait: true
        timeout: "{{ openstack_api_timeout }}"
##############################################################################
# Get public IPs addresses from API for static hostname lookup with /etc/hosts.
##############################################################################
- name: Fetch network addresses assigned to VMs using OpenStack API.
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    #
    # Disable Ansible's interpretor detection logic,
    # which would fail to use the interpretor from an activated virtual environment.
    #
    - ansible_python_interpreter: python
  tasks:
    #
    # Note: we fetch info for all servers relevant or not
    # as filtering directly during the API call is problematic.
    # Will filter the results for the relevant servers later on.
    #
    - name: Get info on floating IPs from OpenStack API.
      openstack.cloud.floating_ip_info:
      register: api_fip_info
    - name: Get info on networks from OpenStack API.
      openstack.cloud.networks_info:
      register: api_network_info
    - name: Get server info from OpenStack API.
      openstack.cloud.server_info:
      register: api_server_info
    - name: "Add addresses to {{ playbook_dir }}/group_vars/{{ stack_name }}/ip_addresses.yml.new"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/group_vars/template/ip_addresses.yml.j2"
        dest: "{{ playbook_dir }}/group_vars/{{ stack_name }}/ip_addresses.yml.new"
        mode: '0644'
      vars:
        relevant_servers_list: "{{ groups['jenkins'] | default([]) }}"
        relevant_servers_info: "{{ api_server_info.openstack_servers | selectattr('name', 'in', relevant_servers_list) | list }}"
    - name: ToDo
      ansible.builtin.debug:
        msg: |
             ***********************************************************************************************************
             IMPORTANT: Manual work!
                        Ansible created:
                            {{ playbook_dir }}/group_vars/{{ stack_name }}/ip_addresses.yml.new
                        Please inspect this file carefully with:
                            diff -y {{ playbook_dir }}/group_vars/{{ stack_name }}/ip_addresses.yml{.new,}
                        and if Ok execute:
                            mv {{ playbook_dir }}/group_vars/{{ stack_name }}/ip_addresses.yml{.new,}
             ***********************************************************************************************************
...
