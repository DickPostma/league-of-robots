#!/bin/bash
#
# Bash code to initialize the environment / repo settings for deploying a specific HPC cluster,
# for which the config is stored in the repo containing this script.
#
# This script assumes there is for each ${STACK_NAME} a corresponding:
#  1. ./group_vars/${STACK_NAME}/                Ansible group_vars directory with variables and secrets encrypted with Ansible vault.
#     ./group_vars/${STACK_NAME}/vars.yml        Ansible variables for this stack, which defines the {{ stack_prefix }} Ansible variable.
#  2. ./static_inventories/${STACK_NAME}.yml     Ansible inventory file.
#  3. ./.vault/vault_pass.txt.${STACK_NAME}      Ansible vault password file.
#
# Once this code was sourced (not executed!) like this:
#     $> . ./lor-init
# You can call the lor-config function for a specific stack prefix. E.g.:
#     $> lor-config tl
#

set -u

#
##
### Environment and bash sanity.
##
#
export LOR_DIR="$( cd -P "$( dirname "${BASH_SOURCE:-}" )" && pwd )"

#
##
### Main.
##
#

function lor-config() {
	#
	# Get and check input.
	#
	local _stack_prefix="${1-}"
	if [[ -z "${_stack_prefix:-}" ]]; then
		printf '%s\n' 'ERROR: must specify an infra stack prefix.'
		return
	fi
	local _group_vars="$(grep "^stack_prefix: ['\"]*${_stack_prefix}['\"]*$" "${LOR_DIR}/group_vars/"*/vars.yml | sed 's|:.*||')"
	if [[ -z "${_group_vars:-}" ]]; then
		printf '%s\n' "ERROR: cannot find group_vars/*/vars.yml for infra stack prefix ${_stack_prefix}."
		return
	fi
	local _stack_name="$(basename "$(dirname "${_group_vars}")")"
	declare -a _required_paths=(
		"${LOR_DIR}/group_vars/${_stack_name}/"
		"${LOR_DIR}/static_inventories/${_stack_name}.yml"
		"${LOR_DIR}/.vault/vault_pass.txt.${_stack_name}"
		"${LOR_DIR}/.vault/vault_pass.txt.all"
	)
	local _required_path
	for _required_path in "${_required_paths[@]}"; do
		if [[ ! -e "${_required_path}" ]]; then
			printf '%s\n' "ERROR: ${_required_path} does not exist for infra stack prefix ${_stack_prefix}."
			return
		fi
	done
	#
	# Get jumphost from inventory file.
	#
	# ToDo: this is rather brittle code;
	# install something like https://github.com/mikefarah/yq
	# for proper parsing of YAML files.
	#
	local _jumphost=$(fgrep -A2 'jumphost' "${LOR_DIR}/static_inventories/${_stack_name}.yml" | head -3 | tail -1 | tr -d ' :')
	#
	# Init and report current setup.
	#
	cd "${LOR_DIR}"
	export AI_PROXY="${_jumphost}"
	export ANSIBLE_INVENTORY="static_inventories/${_stack_name}.yml"
	export ANSIBLE_VAULT_IDENTITY_LIST="all@.vault/vault_pass.txt.all, ${_stack_name}@.vault/vault_pass.txt.${_stack_name}"
	printf '%s\n' "Current working directory is $(pwd)"
	printf '%s\n' "Using AI_PROXY:                    ${AI_PROXY}"
	printf '%s\n' "Using ANSIBLE_INVENTORY:           ${ANSIBLE_INVENTORY}"
	printf '%s\n' "Using ANSIBLE_VAULT_IDENTITY_LIST: ${ANSIBLE_VAULT_IDENTITY_LIST}"
}
